#!/bin/bash

# This script automates the database testing workflow.
# It takes one or more SQL file basenames as arguments (e.g., "aggregation", "filtering").
# It processes each file and then runs a single combined analysis at the end.

# --- Folder Configuration ---
SQL_DIR="./features"
CONTROL_DIR="./control_files"
RES_DIR="./results"
DIFF_DIR="./diffs"
ANALYSIS_DIR="./analysis"

# Create output folders if they don‚Äôt exist to prevent errors
mkdir -p "$RES_DIR" "$DIFF_DIR" "$ANALYSIS_DIR"

# --- Validation ---
# Check if at least one argument is provided.
if [ "$#" -eq 0 ]; then
  echo "Usage: $0 [basename1] [basename2] ..."
  echo "Example: $0 aggregation filtering select"
  exit 1
fi

# --- Main Processing ---
# Declare an array to hold the paths of all generated diff files for final analysis.
declare -a DIFF_FILES_TO_ANALYZE=()

# Loop over all basenames provided as arguments.
for FILENAME in "$@"; do
    echo "========================================"
    echo "‚ñ∂Ô∏è  Processing: $FILENAME"
    echo "========================================"

    # --- File Path Configuration ---
    SQL_FILE="${SQL_DIR}/${FILENAME}.sql"
    CONTROL_FILE="${CONTROL_DIR}/${FILENAME}.ctr"
    RES_FILE="${RES_DIR}/${FILENAME}.res"
    DIFF_FILE="${DIFF_DIR}/${FILENAME}.diff"

    # --- File Validation ---
    if [ ! -f "$SQL_FILE" ]; then
        echo "‚ùå Error: SQL file '$SQL_FILE' not found. Skipping."
        continue # Skip to the next filename
    fi

    if [ ! -f "$CONTROL_FILE" ]; then
        echo "‚ùå Error: Control file '$CONTROL_FILE' not found. Skipping."
        continue # Skip to the next filename
    fi

    # --- Step 1: Generate the .res file ---
    echo "Running auto.sh for $SQL_FILE..."
    if [ -x "./auto.sh" ]; then
        ./auto.sh "$SQL_FILE" "$RES_FILE"
    else
        bash ./auto.sh "$SQL_FILE" "$RES_FILE"
    fi
    echo "Generated ${RES_FILE}"
    echo "----------------------------------------"

    # --- Step 2: Compare and create the .diff file ---
    echo "Running comparator.py..."
    python3 comparator.py "${FILENAME}" "${DIFF_FILE}"
    echo "Generated ${DIFF_FILE}"
    
    # Add the newly created diff file to our list for final analysis.
    if [ -f "$DIFF_FILE" ]; then
        DIFF_FILES_TO_ANALYZE+=("$DIFF_FILE")
    else
        echo "‚ö†Ô∏è Warning: Diff file was not created for $FILENAME. It will be skipped."
    fi
done # End of the main loop

# --- Step 3: Analyze all .diff files together ---
if [ ${#DIFF_FILES_TO_ANALYZE[@]} -eq 0 ]; then
  echo "No diff files were generated. Skipping final analysis."
else
    echo "========================================"
    echo "üî¨ Running combined analysis on all diffs..."
    echo "========================================"
    
    # Define the final, combined report file path
    COMBINED_ANALYSIS_FILE="${ANALYSIS_DIR}/combined_analysis_report.txt"
    
    # Run analyzer.py and check its exit code.
    # The 'if' statement automatically checks if the command was successful (exit code 0).
    if python3 analyzer.py "${DIFF_FILES_TO_ANALYZE[@]}" -o "$COMBINED_ANALYSIS_FILE"; then
        echo "‚úÖ Generated combined analysis: ${COMBINED_ANALYSIS_FILE}"
    else
        echo "‚ùå Error: Failed to generate the combined analysis report."
    fi
fi

echo "----------------------------------------"
echo "‚úÖ All steps completed!"
